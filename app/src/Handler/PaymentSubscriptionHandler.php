<?php

namespace App\Handler;

use App\Entity\Method;
use App\Entity\Rate;
use App\Entity\User;
use App\Repository\MethodRepository;
use App\Repository\PriceRepository;
use App\Repository\RateRepository;
use App\Repository\UserRepository;
use App\Service\TelegramMessageService;
use App\Service\TelegramService;
use Doctrine\ORM\EntityManagerInterface;
use Longman\TelegramBot\Entities\Payments\PreCheckoutQuery;
use Longman\TelegramBot\Request;
use stdClass;

class PaymentSubscriptionHandler
{
    public function __construct(
        private TelegramMessageService $telegramMessageService,
        private RateRepository $rateRepository,
        private MethodRepository $methodRepository,
        private PriceRepository $priceRepository,
        private TelegramMessageHandler $telegramMessageHandler,
        private UserRepository $userRepository,
        private TelegramService $telegramService,
        private EntityManagerInterface $entityManager,
    ){}

    public function handleSubscription(
        stdClass $callbackData,
    ): void {
        $telegramId = TelegramService::getUpdate()?->getCallbackQuery()?->getRawData()['from']['id'] ?? null;

        if ($this->telegramMessageService->sendMessageActiveSubscription($telegramId)) {
            return;
        }

        $rate = $this->rateRepository->findOneBy(['id' => $callbackData->id ?? null]);
        $method = $this->methodRepository->findOneBy(['id' => Method::YKASSA_ID]);
        $currency = $callbackData->currency ?? null;

        if (!$rate instanceof Rate || !$method instanceof Method) {
            return;
        }

        $price = $this->priceRepository->findOneBy(
            [
                'rate' => $rate,
                'currency' => $currency,
            ]
        );

        $prices = [
            [
                'label' => sprintf("%s –∑–∞—Ä—è–¥–æ–∫", $rate->getName()),
                'amount' => $price?->getPrice() * 100,
            ]
        ];

        $postFields = [
            'chat_id' => TelegramService::getUpdate()?->getCallbackQuery()?->getFrom()?->getId() ?? '',
            'provider_token' => $method->getToken(),
            'title' => sprintf("%s –∑–∞—Ä—è–¥–æ–∫", $rate->getName()),
            'description' => sprintf("%s –∑–∞—Ä—è–¥–æ–∫", $rate->getName()),
            'need_email' => true,
            'provider_data' => [
                'receipt' => [
                    'items' => [
                        [
                            'description' => $rate->getName(),
                            'quantity' => 1.00,
                            'amount' => [
                                'value' => $price->getPrice(),
                                'currency' => $currency,
                            ],
                            'vat_code' => 1,
                        ]
                    ],
                    'customer' => [
                        'email' => 'ju_letta@mail.ru',
                    ]
                ]
            ],
            'payload' => [
                'unique_id' => date('y-m-d-H-i-S'),
                'provider_token' => $method->getToken(),
                'id' => $rate->getId(),
                'type' => 'rate',
            ],
            'currency' => $currency,
            'prices' => json_encode($prices),
        ];

        $response = Request::sendInvoice($postFields);

        $this->telegramMessageHandler->addMessage($response);
    }

    public function paymentProcessor(
        PreCheckoutQuery $preCheckoutQuery
    ): void {
        $telegramId = $preCheckoutQuery->getFrom()->getId() ?? null;

        if ($this->telegramMessageService->sendMessageActiveSubscription($telegramId)) {
            $preCheckoutQuery->answer(false, [
                'error_message' => '–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.',
            ]);

            return;
        }

        $response = $preCheckoutQuery->answer(true);

        $this->telegramMessageHandler->addMessage($response);
    }

    public function handelSuccessfulPayment(): void {
        $this->addUser();

        Request::sendMessage([
            'chat_id' => TelegramService::getUpdate()->getMessage()->getChat()->getId(),
            'parse_mode' => 'HTML',
            'text' => "
            <b>–ü—Ä–∏–≤–µ—Ç, –º–æ—è –¥–æ—Ä–æ–≥–∞—è!</b>

<i>–•–æ—á—É –≤—ã—Ä–∞–∑–∏—Ç—å —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –ø–æ–∫—É–ø–∫—É –º–æ–µ–≥–æ —Å–±–æ—Ä–Ω–∏–∫–∞ –∑–∞—Ä—è–¥–æ–∫. –Ø —Å–∞–º–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è —Å—Ç—Ä–∞–¥–∞–ª–∞ –æ—Ç –æ—Ç–µ–∫–æ–≤ –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ –ø–ª–æ—Ö–æ–π –æ—Å–∞–Ω–∫–∏ –∏ –Ω–µ–≥—Ä–∞–º–æ—Ç–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, —Ö—É–¥–µ–ª–∞, —Å–∞–¥–∏–ª–∞—Å—å –Ω–∞ –æ—á–µ—Ä–µ–¥–Ω—É—é –¥–∏–µ—Ç—É, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–ª–æ –∏ –º–æ–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å —Å–æ –º–Ω–æ–π. –¢–æ–≥–¥–∞ —è –±—ã–ª–∞ –¥–∞–ª–µ–∫–∞ –æ—Ç —Å–ø–æ—Ä—Ç–∞ –∏ –º–Ω–æ–≥–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—è –±—ã–ª–∏ —Å–ª–æ–∂–Ω—ã –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—ç—Ç–æ–º—É –≤ —Å–≤–æ–∏—Ö –∑–∞—Ä—è–¥–∫–∞—Ö —è —Å–æ–±—Ä–∞–ª–∞ –Ω–µ—Å–ª–æ–∂–Ω—ã–µ, –Ω–æ —Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å –ª—é–±—ã–º —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –í–ø–µ—Ä–µ–¥–∏ —É –Ω–∞—Å —Å —Ç–æ–±–æ–π 30 –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∑–∞—Ä—è–¥–æ–∫ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç. –Ø –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –æ–Ω–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –æ—Å–∞–Ω–∫—É, –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –æ—Ç–µ–∫–æ–≤ –∏ —É–∫—Ä–µ–ø–∏—Ç—å –º—ã—à—Ü—ã —Ç–∞–∑–æ–≤–æ–≥–æ –¥–Ω–∞, –Ω–æ –∏ –∑–∞—Ä—è–¥—è—Ç —Ç–µ–±—è –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –ø—Ä–∏–≤—å—é—Ç –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è —Å–≤–æ–µ–º—É —Ç–µ–ª—É –≤–æ –∏–º—è –ª—é–±–≤–∏ –∫ –Ω–µ–º—É‚ù§Ô∏è

–ù—É —á—Ç–æ? –í–ø–µ—Ä–µ–¥!</i>",
        ]);
        Request::sendMessage([
            'chat_id' =>  TelegramService::getUpdate()->getMessage()->getChat()->getId(),
            'parse_mode' => 'HTML',
            'text' => "<b>–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b>
            
üíß –∑–∞—Ä—è–¥–∫–∏ —Å–æ—á–µ—Ç–∞—é—Ç –≤ —Å–µ–±–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–∞–Ω–∫—É, –ø—Ä–æ—Ç–∏–≤–æ–æ—Ç–µ—á–Ω—ã–µ, —Ç–∞–∑–æ–≤–æ–µ –¥–Ω–æ, –º—ã—à—Ü—ã –∂–∏–≤–æ—Ç–∞ + –æ–±—â–µ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ç–µ–ª–∞
üïê –∑–∞—Ä—è–¥–∫–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —É—Ç—Ä–∞, –Ω–æ —Å —É—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–ª–∞—Å—Å–Ω–æ - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —É—Ö–æ–¥—è—Ç —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç–µ–∫–∏, –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∑–∞—Ä—è–¥ –±–æ–¥—Ä–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
‚è± –∫–∞–∂–¥–∞—è –∑–∞—Ä—è–¥–∫–∞ –¥–ª–∏—Ç—Å—è 3-5 –º–∏–Ω—É—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ 1 –ø–æ–¥—Ö–æ–¥—É –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
üî¢ –∫–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ 12-15 —Ä–∞–∑, –µ—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞ –∫–∞–∂–¥—É—é —Ä—É–∫—É –∏ –Ω–æ–≥—É, —Ç–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø–æ 12-15 —Ä–∞–∑, –µ—Å–ª–∏ —Å—Ç–æ—Ä–æ–Ω—ã —á–µ—Ä–µ–¥—É—é—Ç—Å—è, —Ç–æ–≥–¥–∞ –≤ –æ–±—â–µ–º 12-15 —Ä–∞–∑
ü©∏–≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫–∏ –º–æ–∂–Ω–æ, —Ç—ã –º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å
ü§∞–∑–∞—Ä—è–¥–∫—É –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ä–∞—á–∞-–≥–∏–Ω–µ–∫–æ–ª–æ–≥–∞ –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∂–∏–≤–æ—Ç–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–∏–¥—è –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö –∏–ª–∏ –Ω–∞ —á–µ—Ç–≤–µ—Ä–µ–Ω—å–∫–∞—Ö
ü•ó –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ (–ø–æ –ö–ë–ñ–£) –∏ —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π - –≤ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ —Å –∑–∞—Ä—è–¥–∫–∞–º–∏ –±—É–¥–µ—Ç –Ω–∞–∏–ª—É—á—à–∏–π —ç—Ñ—Ñ–µ–∫—Ç",
        ]);

        $this->telegramService->forwardMessage(1, getenv('ADMIN_GROUP_ID'), TelegramService::getUpdate()->getMessage()->getChat()->getId());
    }

    private function addUser(): void {
        $telegramId = TelegramService::getUpdate()->getMessage()->getChat()->getId();
        $user = $this->userRepository->findOneBy(['telegramId' => $telegramId]);
        $invoicePayload = json_decode(TelegramBotChargersHandler::getSuccessfulPayment()?->getInvoicePayload());
        $rate = $this->rateRepository->findOneBy(['id' => $invoicePayload->id]);

        if ($user) {
            if ($user->hasActiveSubscription()) {
                return;
            }

            $this->updateSubscription($user, $rate);

            return;
        }

        $user = new User();
        $user->setTelegramId($telegramId);
        $user->addSubscription($rate);
        $this->entityManager->persist($user);

        $this->entityManager->flush();
    }

    private function updateSubscription(
        User $user,
        Rate $rate,
    ): void {
        $user->addSubscription($rate);
        $this->entityManager->flush();
    }
}